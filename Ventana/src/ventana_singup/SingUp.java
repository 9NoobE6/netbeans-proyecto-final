/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ventana_singup;

// Importar mis clases
import clases.*;
import java.awt.Color;
import java.awt.Dimension;
import ventana_pricipal.Principal;
import jpanelimagen.ImagenFondo;

// Importar librerias java
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.RandomAccessFile;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JPasswordField;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.Timer;
import javax.swing.border.BevelBorder;
import javax.swing.border.LineBorder;
import javax.swing.text.DefaultCaret;
import jpanelimagen.JPanelImagen;
import ventana_amigos.Amigos;
import ventana_people.People;
import watcher.profileWatcherNotify;

/**
 *
 * @author max98
 */
public class SingUp extends javax.swing.JFrame {

    /**
     * Creates new form SingUp
     */
    public SingUp() {  
        initComponents();
        this.InicializarVentana();
    }
    
    public SingUp(Session session_activa) {
        initComponents();
        this.session_activa = session_activa;
        this.InicializarVentana();
    }
    
    public Session getSession_activa() {
        return session_activa;
    }

    public void setSession_activa(Session session_activa) {
        this.session_activa = session_activa;
    }
    
    public void fncMostrarMensajeDeBienvenida(){
        JOptionPane.showMessageDialog(null, "Hola, " + session_activa.getStrNombres() + "\n" + "Bienvenido a RS Gobim.");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel_2_Background = new jpanelimagen.JPanelImagen();
        panel_foto_de_perfil = new javax.swing.JPanel();
        panel_portada = new jpanelimagen.JPanelImagen();
        campo_nombres = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        campo_apellidos = new javax.swing.JTextField();
        campo_email = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnModificarCuenta = new javax.swing.JButton();
        campo_sexo = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        campo_contrasenha = new javax.swing.JPasswordField();
        jPanel1 = new javax.swing.JPanel();
        bntAmigos = new javax.swing.JButton();
        btnPeople = new javax.swing.JButton();
        btnCerrarSession = new javax.swing.JButton();
        btnEliminarCuenta = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        panel_contenedor_mural = new javax.swing.JPanel();
        panel_notify = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lista_de_notificaciones = new javax.swing.JList<>();
        jLabel6 = new javax.swing.JLabel();
        bntLimpiarNotify = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        panel_foto_de_perfil.setBackground(new java.awt.Color(255, 255, 255));
        panel_foto_de_perfil.setToolTipText("Click para cambiar el foto de perfil");
        panel_foto_de_perfil.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                panel_foto_de_perfilMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout panel_foto_de_perfilLayout = new javax.swing.GroupLayout(panel_foto_de_perfil);
        panel_foto_de_perfil.setLayout(panel_foto_de_perfilLayout);
        panel_foto_de_perfilLayout.setHorizontalGroup(
            panel_foto_de_perfilLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 146, Short.MAX_VALUE)
        );
        panel_foto_de_perfilLayout.setVerticalGroup(
            panel_foto_de_perfilLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 148, Short.MAX_VALUE)
        );

        panel_portada.setBackground(new java.awt.Color(204, 255, 255));

        campo_nombres.setText("jTextField1");
        campo_nombres.setEnabled(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel1.setText("Nombre (s):");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel2.setText("Apellido (s):");

        campo_apellidos.setText("jTextField1");
        campo_apellidos.setEnabled(false);

        campo_email.setText("jTextField1");
        campo_email.setEnabled(false);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel3.setText("Sexo:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel4.setText("Correo electronico:");

        btnModificarCuenta.setBackground(new java.awt.Color(153, 153, 153));
        btnModificarCuenta.setForeground(new java.awt.Color(255, 255, 255));
        btnModificarCuenta.setText("Modificar");
        btnModificarCuenta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnModificarCuentaMouseReleased(evt);
            }
        });

        campo_sexo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Femenino", "Masculino" }));
        campo_sexo.setEnabled(false);

        jLabel5.setText("Contrase√±a:");

        campo_contrasenha.setText("jPasswordField1");
        campo_contrasenha.setEnabled(false);

        javax.swing.GroupLayout panel_portadaLayout = new javax.swing.GroupLayout(panel_portada);
        panel_portada.setLayout(panel_portadaLayout);
        panel_portadaLayout.setHorizontalGroup(
            panel_portadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_portadaLayout.createSequentialGroup()
                .addGroup(panel_portadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_portadaLayout.createSequentialGroup()
                        .addGroup(panel_portadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panel_portadaLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(campo_nombres, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panel_portadaLayout.createSequentialGroup()
                                .addGap(59, 59, 59)
                                .addComponent(jLabel1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panel_portadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panel_portadaLayout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(jLabel2))
                            .addComponent(campo_apellidos, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panel_portadaLayout.createSequentialGroup()
                        .addGroup(panel_portadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panel_portadaLayout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(jLabel4))
                            .addGroup(panel_portadaLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(campo_email, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(panel_portadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(panel_portadaLayout.createSequentialGroup()
                                .addGap(105, 105, 105)
                                .addComponent(jLabel5)
                                .addGap(70, 70, 70))
                            .addGroup(panel_portadaLayout.createSequentialGroup()
                                .addGap(66, 66, 66)
                                .addComponent(campo_contrasenha)))))
                .addGroup(panel_portadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_portadaLayout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(btnModificarCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_portadaLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panel_portadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(campo_sexo, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panel_portadaLayout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addComponent(jLabel3)))
                        .addGap(44, 44, 44))))
        );
        panel_portadaLayout.setVerticalGroup(
            panel_portadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_portadaLayout.createSequentialGroup()
                .addGroup(panel_portadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panel_portadaLayout.createSequentialGroup()
                        .addContainerGap(24, Short.MAX_VALUE)
                        .addComponent(btnModificarCuenta)
                        .addGap(23, 23, 23)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(campo_sexo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel_portadaLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(panel_portadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panel_portadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(campo_apellidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(campo_nombres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(panel_portadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panel_portadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(campo_email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(campo_contrasenha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(24, 24, 24))
        );

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        bntAmigos.setBackground(new java.awt.Color(0, 153, 153));
        bntAmigos.setForeground(new java.awt.Color(255, 255, 255));
        bntAmigos.setText("Ver amigos");
        bntAmigos.setFocusable(false);
        bntAmigos.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bntAmigos.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bntAmigos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                bntAmigosMouseReleased(evt);
            }
        });

        btnPeople.setBackground(new java.awt.Color(0, 102, 153));
        btnPeople.setForeground(new java.awt.Color(255, 255, 255));
        btnPeople.setText("People");
        btnPeople.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnPeopleMouseReleased(evt);
            }
        });

        btnCerrarSession.setBackground(new java.awt.Color(204, 51, 0));
        btnCerrarSession.setForeground(new java.awt.Color(255, 255, 255));
        btnCerrarSession.setText("Cerrar Session");
        btnCerrarSession.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnCerrarSessionMouseReleased(evt);
            }
        });

        btnEliminarCuenta.setBackground(new java.awt.Color(204, 0, 51));
        btnEliminarCuenta.setForeground(new java.awt.Color(255, 255, 255));
        btnEliminarCuenta.setText("Eliminar cuenta");
        btnEliminarCuenta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnEliminarCuentaMouseReleased(evt);
            }
        });

        jButton1.setText("Notificaciones");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButton1MouseReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bntAmigos)
                .addGap(18, 18, 18)
                .addComponent(btnPeople)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnEliminarCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnCerrarSession, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bntAmigos)
                    .addComponent(btnPeople)
                    .addComponent(btnCerrarSession)
                    .addComponent(btnEliminarCuenta)
                    .addComponent(jButton1))
                .addContainerGap())
        );

        panel_contenedor_mural.setBackground(new java.awt.Color(204, 255, 255));
        panel_contenedor_mural.setOpaque(false);

        javax.swing.GroupLayout panel_contenedor_muralLayout = new javax.swing.GroupLayout(panel_contenedor_mural);
        panel_contenedor_mural.setLayout(panel_contenedor_muralLayout);
        panel_contenedor_muralLayout.setHorizontalGroup(
            panel_contenedor_muralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 532, Short.MAX_VALUE)
        );
        panel_contenedor_muralLayout.setVerticalGroup(
            panel_contenedor_muralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        panel_notify.setBackground(new java.awt.Color(51, 51, 51));
        panel_notify.setForeground(new java.awt.Color(255, 255, 255));

        lista_de_notificaciones.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "No tienes notificaciones..." };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        lista_de_notificaciones.setEnabled(false);
        lista_de_notificaciones.setFocusable(false);
        jScrollPane1.setViewportView(lista_de_notificaciones);

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Notificaciones");

        bntLimpiarNotify.setBackground(new java.awt.Color(102, 0, 0));
        bntLimpiarNotify.setForeground(new java.awt.Color(255, 255, 255));
        bntLimpiarNotify.setText("Limpiar");
        bntLimpiarNotify.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                bntLimpiarNotifyMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout panel_notifyLayout = new javax.swing.GroupLayout(panel_notify);
        panel_notify.setLayout(panel_notifyLayout);
        panel_notifyLayout.setHorizontalGroup(
            panel_notifyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(panel_notifyLayout.createSequentialGroup()
                .addGroup(panel_notifyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_notifyLayout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addComponent(jLabel6))
                    .addGroup(panel_notifyLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(bntLimpiarNotify)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panel_notifyLayout.setVerticalGroup(
            panel_notifyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_notifyLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bntLimpiarNotify)
                .addContainerGap())
        );

        javax.swing.GroupLayout panel_2_BackgroundLayout = new javax.swing.GroupLayout(panel_2_Background);
        panel_2_Background.setLayout(panel_2_BackgroundLayout);
        panel_2_BackgroundLayout.setHorizontalGroup(
            panel_2_BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_2_BackgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_2_BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panel_2_BackgroundLayout.createSequentialGroup()
                        .addComponent(panel_foto_de_perfil, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(panel_portada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(panel_2_BackgroundLayout.createSequentialGroup()
                        .addComponent(panel_notify, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panel_contenedor_mural, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        panel_2_BackgroundLayout.setVerticalGroup(
            panel_2_BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_2_BackgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_2_BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panel_foto_de_perfil, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panel_portada, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_2_BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panel_contenedor_mural, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panel_notify, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_2_Background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_2_Background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void panel_foto_de_perfilMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel_foto_de_perfilMouseReleased
        // TODO add your handling code here:
        // Cambiar foto de perfil
        JFileChooser elegirArchivo = new JFileChooser();
        elegirArchivo.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("gif","jpg","jpeg", "png");
        elegirArchivo.addChoosableFileFilter(filter);
        int respuesta = elegirArchivo.showOpenDialog(this);
        
        
        if( respuesta == JFileChooser.APPROVE_OPTION ){
            File archivo = elegirArchivo.getSelectedFile();
            
            if(archivo.length() > 1000000) {
                JOptionPane.showMessageDialog(null, "Lo siento, la imagen tiene que ser menor de 1MB.");
            }else{
                try {
                    this.fncCopiarImagen(archivo.getAbsolutePath());
                } catch (IOException ex) {
                    Logger.getLogger(SingUp.class.getName()).log(Level.SEVERE, null, ex);
                }

                this.session_activa.fncActualizarDatos();
                String img_profile = Storage.fncStorageCrearRutaProfile( this.session_activa.getStrEmail() , Rutas.extesion_svg);
                this.fncInsertarPicture(this.panel_foto_de_perfil, img_profile  , true);
                JOptionPane.showMessageDialog(null, "Foto de perfil actualizado exitosamente.");
            }
        }
    }//GEN-LAST:event_panel_foto_de_perfilMouseReleased

    private void btnModificarCuentaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnModificarCuentaMouseReleased
        // TODO add your handling code here:
        
        System.out.println("texot :: " + this.btnModificarCuenta.getText());
        // Si modificar_cuenta es false 
        if( !this.modificar_cuenta && this.btnModificarCuenta.getText().equals("Modificar") ){
            
            // Activar los campos para actualizar datos. 
            this.fncCambiarEstados(!this.modificar_cuenta);            
            JOptionPane.showMessageDialog(null, "Campos activados, capture los nuevos datos.");

            this.modificar_cuenta = true;
            this.fncCambiarEstados(modificar_cuenta);
            this.btnModificarCuenta.setText("Actualizar");
            this.btnModificarCuenta.setBackground(new Color(153,153,153));
        }else{
            
            this.fncModificarDatosDeSession();
            
        }
                
    }//GEN-LAST:event_btnModificarCuentaMouseReleased

    private void btnCerrarSessionMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCerrarSessionMouseReleased

        // Se borra la ventana SingUp liberando memoria
        this.observador.stop(); // Se detiene los observadores
        this.setVisible(false); // Desaparece la ventana
        this.dispose(); // Se libera la memoria
        
        // Se inicializa la vetana Pricipal
        Principal ventana = new Principal();
        this.session_activa = null; // En la ventana SingUp se elimina la session activa
        ventana.setVisible(true);
        
    }//GEN-LAST:event_btnCerrarSessionMouseReleased

    private void opcionesDeCuentaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_opcionesDeCuentaMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_opcionesDeCuentaMouseClicked

    private void btnEliminarCuentaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEliminarCuentaMouseReleased
        // TODO add your handling code here:
        String path = "";
        
        try{
            int respuesta = JOptionPane.showConfirmDialog(null, "Seguro que deseas eliminar la cuenta?");
            
            if( respuesta == 0 ){
                
                // Se borra la ventana SingUp liberando memoria
                this.observador.stop(); // Se detiene los observadores
                this.setVisible(false); // Desaparece la ventana
                this.dispose(); // Se libera la memoria
                
                // * Si el foto de perfil que tiene session_activa es la de por defecto, no se elimina
                if( !this.session_activa.getStrImgPerfil().equals("user_default.png") ){
                    new File( Storage.fncStorageCrearRutaProfile(this.session_activa.getStrEmail(), Rutas.extesion_svg) ).delete(); 
                }
                
                // * Eliminar todso los datos de session_activa
                new File( Storage.fncStorageCrearRutaProfile(this.session_activa.getStrEmail(), Rutas.extesion_chats) ).delete();
                new File( Storage.fncStorageCrearRutaProfile(this.session_activa.getStrEmail(), Rutas.extesion_friends) ).delete();
                new File( Storage.fncStorageCrearRutaProfile(this.session_activa.getStrEmail(), Rutas.extesion_data) ).delete();
                
                // * Eliminar el contenedor de session_activa y del registro de perfiles o cuentas .profiles
                Storage.fncStorageEliminarDirectorio( new File(Rutas.storage_profiles + this.session_activa.getStrEmail()) );
                Storage.fncStorageEliminarUnaLinea(new File(Rutas.path_profiles), this.session_activa.getStrEmail());

                // Se inicializa la vetana Pricipal
                Principal ventana = new Principal();
                this.session_activa = null; // En la ventana SingUp se elimina la session activa
                ventana.tiempo.stop();
                ventana.setVisible(true);
                System.out.println("*** SingUp:::Cuenta eliminada");
                
            }
        
        }catch(Exception e){}

    }//GEN-LAST:event_btnEliminarCuentaMouseReleased

    private void btnPeopleMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPeopleMouseReleased
        
        // Se borra la ventana SingUp liberando memoria
        this.observador.stop(); // Se detiene los observadores
        this.setVisible(false); // Desaparece la ventana
        this.dispose(); // Se libera la memoria
        
        // Se inicializa la vetana People
        People cuentas = new People( this.session_activa );
        this.session_activa = null; // En la ventana SingUp se elimina la session activa
        cuentas.setVisible(true);
        
    }//GEN-LAST:event_btnPeopleMouseReleased

    private void bntAmigosMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bntAmigosMouseReleased
        // TODO add your handling code here:
        
        // Se borra la ventana SingUp liberando memoria
        this.observador.stop(); // Se detiene los observadores
        this.setVisible(false); // Desaparece la ventana
        this.dispose(); // Se libera la memoria
        
        // Se inicializa la vetana People
        Amigos ventana = new Amigos( this.session_activa );
        this.session_activa = null; // En la ventana SingUp se elimina la session activa
        ventana.setVisible(true);
        
    }//GEN-LAST:event_bntAmigosMouseReleased

    private void jButton1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseReleased
        // TODO add your handling code here:
        
        if( this.panel_notify_activado ){
            // Si el area de notifiaciones esta activado se desactiva
            this.panel_notify.setEnabled(false);
            this.panel_notify.setVisible(false);
            this.panel_notify_activado = false;
            
        }else{
            // Si el area de notifiaciones esta desactivado se activa
            this.panel_notify.setEnabled(true);
            this.panel_notify.setVisible(true);
            this.panel_notify_activado = true;
            
        }
        
    }//GEN-LAST:event_jButton1MouseReleased

    private void bntLimpiarNotifyMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bntLimpiarNotifyMouseReleased
        
        this.fncLimpiarNotificaciones();
        
    }//GEN-LAST:event_bntLimpiarNotifyMouseReleased
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SingUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SingUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SingUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SingUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SingUp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bntAmigos;
    private javax.swing.JButton bntLimpiarNotify;
    private javax.swing.JButton btnCerrarSession;
    private javax.swing.JButton btnEliminarCuenta;
    private javax.swing.JButton btnModificarCuenta;
    private javax.swing.JButton btnPeople;
    private javax.swing.JTextField campo_apellidos;
    private javax.swing.JPasswordField campo_contrasenha;
    private javax.swing.JTextField campo_email;
    private javax.swing.JTextField campo_nombres;
    private javax.swing.JComboBox<String> campo_sexo;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> lista_de_notificaciones;
    private jpanelimagen.JPanelImagen panel_2_Background;
    private javax.swing.JPanel panel_contenedor_mural;
    private javax.swing.JPanel panel_foto_de_perfil;
    private javax.swing.JPanel panel_notify;
    private jpanelimagen.JPanelImagen panel_portada;
    // End of variables declaration//GEN-END:variables
    Session session_activa;
    DefaultListModel mensajes = new DefaultListModel();
    DefaultListModel amigos = new DefaultListModel();
    private long size_friendship=0;
    private ActionListener oyente;
    private Timer observador = new Timer(1000, oyente);
    private boolean modificar_cuenta=false;
    private JPanelImagen panel_mural;
    private boolean panel_notify_activado=true;
    
    private void InicializarVentana(){
        
        // * Crear un obsevador para notificaciones
        profileWatcherNotify notify = new profileWatcherNotify(this.session_activa.stgNotify, lista_de_notificaciones);
        
        
        try{
             
            ActionListener tarea;
            tarea = (ActionEvent e) -> {
                
                // Observadores o Watchers (Depende de Session)
                SingUp.this.fncSincronizandoMensajes();
                
                // Observadores o Watchers para notificaciones (Depende de Session)
                notify.Inicializar();
                
            };

           observador.addActionListener(tarea);
           observador.start();
           
        }catch(Exception a){}
        
        // Este es para JFrame SingUp (No depende de Session)
        this.setLocationRelativeTo(null);
        this.panel_2_Background.setImagenFondo(new ImagenFondo( new java.io.File( getClass().getResource("/img/b3.jpg").getPath() ), 1.0f ));
        this.panel_portada.setImagenFondo(new ImagenFondo( new java.io.File( getClass().getResource("/img/b1.jpg").getPath() ), .2f ));
        
        // Este es para JFrame SingUp (No depende de Session)
        this.fncCambiarEstados(false);
        
        // Este es para JFrame SingUp (Si depende de Session)
        this.fncInstertarDatosDeSession();
        
        // Establecer color para el boton Modificar
        this.btnModificarCuenta.setBackground(new Color(102,102,102));
        
        // Establecer propiedes para el mural
        this.panel_mural = new JPanelImagen();
        this.panel_mural.setPreferredSize(new Dimension(0,0));
        //this.panel_mural.setImagenFondo(new ImagenFondo( new java.io.File( getClass().getResource("/img/b1.jpg").getPath() ), 0.0f ));
        this.panel_mural.setLayout(null);
        
        // * Crear un scroollpanel
        JScrollPane scroll = new JScrollPane(panel_mural, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        scroll.setBounds(0,0, this.panel_contenedor_mural.getWidth(), this.panel_contenedor_mural.getHeight());
        scroll.setAutoscrolls(true);
        this.panel_contenedor_mural.add(scroll);
        
        // * Eliminar bordes
        this.panel_mural.setBorder(null);
        this.panel_contenedor_mural.setBorder(null);
        scroll.getViewport().setBorder(null);
        scroll.setBorder(null);
        
        // * Crear fondo invisible
        this.panel_mural.setOpaque(false);
        this.panel_contenedor_mural.setOpaque(false);
        scroll.getViewport().setOpaque(false);
        scroll.setOpaque(false);

        // * Desactivamos el panel del mural
        this.panel_contenedor_mural.setEnabled(true);
        this.panel_contenedor_mural.setVisible(true);
        
        // * Testing para scroll
        JPanel nc = new JPanel();
        nc.setBounds(0, 1200, 200, 200);
        
        JLabel lb1 = new JLabel();
        lb1.setText("Hola mundo desde singup");
        lb1.setBounds(0,0,100,100);
        nc.add(lb1);
        
        this.panel_mural.add(nc);
        this.panel_mural.setPreferredSize(new Dimension(0,1600));
        this.panel_mural.revalidate();
        this.panel_mural.repaint();
        
        // * Testing
        System.out.println("PATH Tome: " + this.session_activa.stgTome);
        System.out.println("PATH Mural: " + this.session_activa.stgNotify);
        System.out.println("panel_notify: " + this.panel_notify.getBounds() );
        
    }
    
    private void fncSincronizandoMensajes(){
        System.out.println("::: Observador SingUp :::");
    }
    
    
    
    private void fncCopiarImagen(String img) throws FileNotFoundException, IOException{
        
        // Crear la nueva ruta del foto de perfil (Email + .svg)
        String path = Storage.fncStorageCrearRutaProfile(this.session_activa.getStrEmail(), Rutas.extesion_svg);
        
        FileInputStream in = new FileInputStream(img);
        FileOutputStream ou = new FileOutputStream( path );
        BufferedInputStream bin = new BufferedInputStream(in);
        BufferedOutputStream bou = new BufferedOutputStream(ou);
        
        // Establecer el nuevo nombre del foto de perfil (Email + .svg)
        // como ... example@extension 
        session_activa.setStrImgPerfil(session_activa.getStrEmail() + Rutas.extesion_svg);
        
        int b=0;
        while(b!=-1){
         b=bin.read();
         bou.write(b);
        }
        
        bin.close();
        bou.close();
    }
    
    public long fncObtenerTamahnoStorages(String file){
        Path path = Paths.get(file);
        long bytes =0;
        try{
             bytes = Files.size(path.toAbsolutePath());
        }catch(Exception e){}
        return bytes;
    }
    
    private void fncInsertarPicture(JPanel contenedor, String url, boolean vaciar){
        
        if(vaciar) contenedor.removeAll();
        
        ImageIcon icono = new ImageIcon( url );
        JLabel etiquetaImagen = new JLabel();
        etiquetaImagen.setBounds(0, 0, contenedor.getWidth(), contenedor.getHeight());
        etiquetaImagen.setIcon( new ImageIcon(icono.getImage().getScaledInstance(etiquetaImagen.getWidth(), etiquetaImagen.getHeight(), Image.SCALE_SMOOTH)) );
        contenedor.add(etiquetaImagen);
        
        if(vaciar) contenedor.validate();
        if(vaciar) contenedor.repaint();
    }
    
    private void fncCambiarEstados(boolean opcion){
        
        // Desactivamo o Activamos los campos de depende de opcion
        this.campo_nombres.setEnabled(opcion);
        this.campo_apellidos.setEnabled(opcion);
        this.campo_email.setEnabled(false);
        this.campo_sexo.setEnabled(opcion);
        this.campo_contrasenha.setEnabled(opcion);
 
    }

    private void fncInstertarDatosDeSession() {
        String img_profile = "";
        
        // Seleccionar el foto de perfil adecuado para el usuario
        if( this.session_activa.getStrImgPerfil().equals("user_default.png") ){
            img_profile = Rutas.path_user_default;
            this.fncInsertarPicture(this.panel_foto_de_perfil, img_profile , false); 
        }else{
            img_profile = Storage.fncStorageCrearRutaProfile(this.session_activa.getStrEmail(), Rutas.extesion_svg);
            this.fncInsertarPicture(this.panel_foto_de_perfil, img_profile , false);
        }
        
        // Insetar los datos personales del usuario
        this.campo_nombres.setText( session_activa.getStrNombres() );
        this.campo_apellidos.setText( session_activa.getStrApellidos());
        this.campo_email.setText( session_activa.getStrEmail());
        this.campo_contrasenha.setText( session_activa.getStrContrasenha() );
        this.campo_sexo.setSelectedItem(session_activa.getStrSexo());
        
        // Insertar el titulo de la ventana
        this.setTitle( this.session_activa.getStrNombres() + " - " + this.session_activa.getStrEmail()  );
    }

    private int fncVerificarCampos() {
        
         // Este es contar los campos modificados
        int campos_modificados = 0;
        int campos_vacios = 0;
        int campos_identicos = 0;
        
        // Quitamos los border rojos de error en caso de existir
        this.campo_nombres.setBorder( new JTextField().getBorder() );
        this.campo_apellidos.setBorder( new JTextField().getBorder() );
        this.campo_email.setBorder( new JTextField().getBorder() );
        this.campo_contrasenha.setBorder( new JTextField().getBorder() );
        
        // Verificar que el campo nombre sea distinto al actual y que no este vacio..
        if( !this.campo_nombres.getText().equals(this.session_activa.getStrNombres()) ){
            if( !this.campo_nombres.getText().isEmpty() ){
                //this.session_activa.setStrNombres( this.campo_nombres.getText() );
                campos_modificados ++;
            }else {
                this.campo_nombres.setBorder(  BorderFactory.createBevelBorder(BevelBorder.LOWERED, Color.LIGHT_GRAY, Color.RED) );
                campos_vacios++;
            }
        } else campos_identicos++;
        
        // Verificar que el campo apellidos sea distinto al actual y que no este vacio..
        if( !this.campo_apellidos.getText().equals(this.session_activa.getStrApellidos()) ){
            if( !this.campo_apellidos.getText().isEmpty() ){
                //this.session_activa.setStrApellidos(this.campo_apellidos.getText() );
                campos_modificados ++;
            }else {
                this.campo_apellidos.setBorder(  BorderFactory.createBevelBorder(BevelBorder.LOWERED, Color.LIGHT_GRAY, Color.RED) );
                campos_vacios++;
            }
        } else campos_identicos++;
        
        // Verificar que el campo email sea distinto al actual y que no este vacio..
        if( !this.campo_email.getText().equals(this.session_activa.getStrEmail()) ){
            if( !this.campo_email.getText().isEmpty() ){
                //this.session_activa.setStrEmail(this.campo_email.getText() );
                campos_modificados ++;
            }else {
                this.campo_email.setBorder(  BorderFactory.createBevelBorder(BevelBorder.LOWERED, Color.LIGHT_GRAY, Color.RED) );
                campos_vacios++;
            }
        } else campos_identicos++;
        
        // Verificar que el campo contrse√±a sea distinto al actual y que no este vacio..
        String password = String.valueOf(this.campo_contrasenha.getPassword());
        if( !password.equals(this.session_activa.getStrContrasenha()) ){
            if( !password.isEmpty() ){
                //this.session_activa.setStrContrasenha(password);
                campos_modificados ++;
            }else {
                this.campo_contrasenha.setBorder(  BorderFactory.createBevelBorder(BevelBorder.LOWERED, Color.LIGHT_GRAY, Color.RED) );
                campos_vacios++;
            }
        } else campos_identicos++;
        
        // Verificar que el campo sexo sea distinto al actual y que no este vacio..
        if( !this.campo_sexo.getSelectedItem().toString().equals(this.session_activa.getStrSexo()) ){
            if( !this.campo_sexo.getSelectedItem().toString().isEmpty() ){
                //this.session_activa.setStrSexo(this.campo_sexo.getSelectedItem().toString());
                campos_modificados++;
            }else campos_vacios++;
        } else campos_identicos++;

        // Si hay un solo campo modificado.. se actualizan los datos..
        if(campos_vacios > 0){
           return 400; // Retorna un estado 400, significa que hay campos vacios
        // Si hay un solo campo modificado.. se actualizan los datos..
        }else if(campos_modificados > 0 ){
           return 100; // Retorna un estado 100, significa que hay campos modificados 
        }else if(campos_identicos > 0 ){
           return 0; // Retorna un estado 0, significa que hay campos modificados
        }
        
        // Retorna un estado -1, estado no identificado
        return -1;
    }

    private void fncModificarDatosDeSession() {
        System.out.println("Estado: " + this.fncVerificarCampos());
            
            int resultado = this.fncVerificarCampos();
            
            if(resultado == 400){
                JOptionPane.showMessageDialog(null, "Complete los datos solicitado.");
            }else
            if( resultado == 100 || resultado == 0 ){
                
                Box box = Box.createVerticalBox();
                JLabel t = new JLabel("Introduzca la contrase√±a actual");
                box.add(t);
                JPasswordField jpf = new JPasswordField(24);
                box.add(jpf);
                int button = -1;
                box.setLocation( this.getLocation() );
                
                int intentos = 0;
                boolean modificado=false;
                do{
                    if( resultado == 100)
                    button = JOptionPane.showConfirmDialog(null, box, "Confirmar los nuevos datos...", JOptionPane.OK_CANCEL_OPTION);
                   
                    if (button == JOptionPane.OK_OPTION) {
                        if( String.valueOf(this.campo_contrasenha.getPassword()).equals(this.session_activa.getStrContrasenha()) ) {
                            // Enviar los datos del formulario a session
                            this.session_activa.setStrNombres(this.campo_nombres.getText());
                            this.session_activa.setStrApellidos(this.campo_apellidos.getText());
                            this.session_activa.setStrEmail(this.campo_email.getText());
                            this.session_activa.setStrContrasenha( String.valueOf(this.campo_contrasenha.getPassword()) );
                            this.session_activa.setStrSexo( this.campo_sexo.getSelectedItem().toString() );

                            this.session_activa.fncActualizarDatos();
                            JOptionPane.showMessageDialog(null, "Tus datos sean actualizado exito.");
                            modificado  = true;

                        }else{
                            intentos++;
                            JOptionPane.showMessageDialog(null, "Contrase√±a incorrecta, datos no actualizados.\n"
                                    + "Puedes volver internarlo en "+ (3 - intentos) +" intentos mas.");
                             
                        }
                    }
                }while(button == JOptionPane.OK_OPTION && intentos < 3 && modificado == false );
                
                // Desactivamos los campos para modificar datos
                this.modificar_cuenta = false;
                this.fncCambiarEstados(modificar_cuenta);
                this.btnModificarCuenta.setText("Modificar");
                this.btnModificarCuenta.setBackground(new Color(102,102,102));
                this.fncInstertarDatosDeSession();
            }
    }

    private void fncLimpiarNotificaciones() {
        
        // ***** TESTING
        System.out.println(":: Notify :: getSize = " + this.lista_de_notificaciones.getModel().getSize());
        
        // M√©todo para eliminar todas la notificaciones de session activa
        if( !this.lista_de_notificaciones.getModel().getElementAt(0).contains("No tienes") ){
            int respuesta = JOptionPane.showConfirmDialog(null, "Seguro que deseas eliminar todas las notificaciones? ",
                    "Confirmar...", JOptionPane.YES_NO_OPTION);
            
            if( respuesta == JOptionPane.YES_OPTION){
                JOptionPane.showMessageDialog(null, "Se eliminaron todas las notificaciones, exitosamente.");
                new File(this.session_activa.stgNotify).delete();
                try{ new File(this.session_activa.stgNotify).createNewFile(); }catch(IOException e){}
                
                
            }
            
        }
        
    }
    
} // #! Fin de la clase
